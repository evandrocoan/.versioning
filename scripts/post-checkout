#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "post-checkout".
#
# This hook is invoked when a git-checkout is run after having updated
# the worktree. The hook is given three parameters:
# $1 - the ref of the previous HEAD,
# $2 - the ref of the new HEAD (which may or may not have changed),
# $3 - flag indicating whether the checkout was a branch checkout
#      (changing branches, flag=1) or a file checkout (retrieving
#      a file from the index, flag=0). This hook cannot affect the outcome
#      of git-checkout.



# This script is run straight from the project's git root folder, as the current working directory.
# printf "Running the post-checkout hook...\n"


# Get the project's `.git` folder. It will return the absolute path to the `.git` folder, unless
# the current working directory is already the project's git root path or the `.git` folder itself.
GIT_DIR_="$(git rev-parse --git-dir)"

# Get the submodule (if any) or the main's repository root directory.
PROJECT_ROOT_DIRECTORY=$(git rev-parse --show-toplevel)

# Get the `VERSIONING_SCRIPTS_FOLDER_PATH`
VERSIONING_SCRIPTS_FOLDER_PATH=$(cat $GIT_DIR_/hooks/gitHooksRoot.txt)

# Read the configurations file.
updateVersionScript=$PROJECT_ROOT_DIRECTORY/$VERSIONING_SCRIPTS_FOLDER_PATH/__post-git-hook.sh


# Read the configurations file. Example $PROJECT_ROOT_DIRECTORY/$VERSIONING_SCRIPTS_FOLDER_PATH/../gitHooksConfig.txt.
gitHooksConfigPath=$(cat $PROJECT_ROOT_DIRECTORY/$VERSIONING_SCRIPTS_FOLDER_PATH/../../gitHooksConfig.txt)

# $targetBranch example: develop, use . to operate all branches
targetBranch=$(echo $gitHooksConfigPath | cut -d',' -f 3 | tr -d ' ')


if [[ $targetBranch != "." ]]
then
    currentBranch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
    commitsBehindDevelop=$(git rev-list --count $currentBranch..$targetBranch)

    # Alert the user when his checkout branch is behind the $targetBranch branch.
    if [ $commitsBehindDevelop -gt 0 ]
    then
        printf "ATTENTION: Your branch '$currentBranch' is $commitsBehindDevelop commits behind $targetBranch\n"
    fi
fi

# Run the version update script.
if sh $updateVersionScript
then
    :
    # printf "The post-checkout hook successfully ran '$updateVersionScript'.\n"
else
    printf "Could not run the update program '$updateVersionScript' properly!\n"
    exit 1
fi


# Exits the program using a successful exit status code.
exit 0

